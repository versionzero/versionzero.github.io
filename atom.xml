<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Pre-Released Ideas]]></title>
  <link href="http://versionzero.github.io/atom.xml" rel="self"/>
  <link href="http://versionzero.github.io/"/>
  <updated>2015-01-12T13:13:29-08:00</updated>
  <id>http://versionzero.github.io/</id>
  <author>
    <name><![CDATA[Ben Burnett]]></name>
    <email><![CDATA[yeah@right.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Revision Control Is Not Just a Backup Tool]]></title>
    <link href="http://versionzero.github.io/blog/2015/01/12/revision-control-is-not-a-backup-tool/"/>
    <updated>2015-01-12T13:04:00-08:00</updated>
    <id>http://versionzero.github.io/blog/2015/01/12/revision-control-is-not-a-backup-tool</id>
    <content type="html"><![CDATA[<p>I made the mistake, when I started using revision control&mdash;like many
others might have done&mdash;to think of it, conceptually, as a backup
mechanism. This, it turns out, I believe, is naive, and a very poor
characterization of the power of revision control. Let me explain.</p>

<!--more-->


<p>First things first: starting an opinion piece by contradicting
yourself is a gamble, but I hope you&rsquo;ll still hear me out.  And notice
I do call this an opinion: I&rsquo;ve run across to many blog posts that
make bold statements of fact, but provide little more than anecdotal
evidence to support their claim.  There very well maybe evidence for
what I am about to say, but I have not done any background work on the
topic. (I will amend this article as my understanding of the tools
improves.)</p>

<p>So what&rsquo;s the contradiction? Well, revision control tools actualy are
backup tools: i.e. they obviously provide a way to recover old data.
Moreover, there are backup and synchronization tools that use revision
control under the hood.  But these uses only encompass a small subset
of the power of revision control.  In what follows, we shall endeavour
to present some of the important distinctions between revision control
and backup tools.</p>

<h2>What is Revision Control?</h2>

<p>We have all invented or borrowed a (possibly naive) system for
revisions to electronic documents.  In some cases, these revisions can
be seen as dated copies of a file:</p>

<ul>
<li>CV-2010-09-12.doc;</li>
<li>CV-2012-04-09.doc;</li>
<li>etc.</li>
</ul>


<p>The intent, presumably, is to keep a history of the changes in the
content as well as preserving any content removed in subsequent
revisions.  This type of revision is practical for a small number of
documents with fairly stable content: a curriculum vitae may change
infrequently enough that there may only ever be a few revisions.
Source code is another story.</p>

<p>Source code revisions are useful for the same reasons CV revisions
are.  Revisions for code are even more useful when there are
(possibly) many people working over a long period of time on a
project.  We will imagine this time period to be 20 years.  This
length of time can almost ensure that there will exist code that was
originally written by one person and subsequently updated by
others. This is where revisions come in to play.</p>

<p>Comments are one thing, they tell the reader what the code is supposed
to do and why it was decided that it should be done that way&ndash;for
better or worse.  Comments are discussions about code in a highly
localized environment.  Documentation can be used to provide the
more general purpose of the program, but there is still information
missing.  A revision control system allows changes in code to be
tracked but also explained in a different forum than would be
appropriate for comments.  It&rsquo;s easy to imagine a body of code that is
20 years old will have files and sub-systems that have changes a dozen
or so times.  Keeping a record of all the comments from previous code
that is no longer relevant to current code is a bad idea&ndash;it can
confuse the intent of the code.  Instead, the changes can be cataloged
as part of a revision; that is, they will still describe the code
present in the old versions, but do not need to be preserved in new
versions.  Furthermore, the revision comments can include a discussion
on the nature of the changes.  In many cases this information is
interesting and worth preserving, but is generally not useful to have
at the code or documentation level: the fidelity of the content is too
distinct from those.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Karabiner private.xml]]></title>
    <link href="http://versionzero.github.io/blog/2015/01/11/karabiner-private-xml/"/>
    <updated>2015-01-11T08:41:00-08:00</updated>
    <id>http://versionzero.github.io/blog/2015/01/11/karabiner-private-xml</id>
    <content type="html"><![CDATA[<p>Over the years, through school and other areas, I became addicted to
both Emacs and my Mac. Unfortunately, as both evolved, they became less
and less friendly with each other.</p>

<!--more-->


<p>One thing in particular bothers me about the interaction between Emacs
and a Mac: the keyboard. It used to be I could use Ctrl+Left/Right
arrow to skip an Emacs defined &ldquo;word&rdquo;; however, this became the way
for Mac users to switch spaces. This is when I found Karabiner. I now
use Karabiner to change the purpose of the Fn key so that I can use it
and the arrow keys to switch spaces, but also maintain the ability to
skip around in Emacs by words, instead of simply by character or
paragraph.</p>

<p>Here is my private.xml for this particular use case:</p>

<div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
<span class="nt">&lt;root&gt;</span>
    <span class="nt">&lt;item&gt;</span>
        <span class="nt">&lt;name&gt;</span>My Spaces (I like to use Fn+Left/Right arrow for switching spaces)<span class="nt">&lt;/name&gt;</span>
        <span class="nt">&lt;appendix&gt;</span>Change Fn to Ctrl+Option+Command<span class="nt">&lt;/appendix&gt;</span>
        <span class="nt">&lt;identifier&gt;</span>private.fn_control_option_command_hyper<span class="nt">&lt;/identifier&gt;</span>
        <span class="nt">&lt;autogen&gt;</span>__KeyToKey__ KeyCode::FN, KeyCode::COMMAND_L, ModifierFlag::OPTION_L, ModifierFlag::CONTROL_L<span class="nt">&lt;/autogen&gt;</span>
    <span class="nt">&lt;/item&gt;</span>
<span class="nt">&lt;/root&gt;</span></code></pre></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Streaming From iPhone to iPhone]]></title>
    <link href="http://versionzero.github.io/blog/2015/01/03/streaming-from-iphone-to-iphone/"/>
    <updated>2015-01-03T07:11:00-08:00</updated>
    <id>http://versionzero.github.io/blog/2015/01/03/streaming-from-iphone-to-iphone</id>
    <content type="html"><![CDATA[<p>Part of this project includes code, not just writing. Obviously, the
code to the site is available, but what follows is code that is
independent of the site, in so far as it doesn&rsquo;t help run it. The code
itself is hosted on another GitHub account, for my own reasons, but
the writeups will all be here.</p>

<!--more-->


<h3>Streaming to iOS Devices</h3>

<p>The first question that comes to mind is why? Why would you want to
stream to an iOS device rather than just from it?</p>

<p>The answer reveals how fortunate (spoiled) I&rsquo;ve been over the past few
years: I&rsquo;ve always been a technology enthusiast and I have always been
one to try to keep somewhat up-to-date on the latest gadgets. In some
respects, this has meloed over the years, but it hasn&rsquo;t stopped me
from buying a new previous generation iPhone every time a new one is
released. In this case, it means I am currently an owner of a 5s and
4s, as I have not gotten rid of the 4s yet. This is all relevant
because it lead me to this question: what can I do with an old iPhone
that I might not be able to do with a computer. It turns out, there is
a lot you can use an old iPhone for, much of which is not relevant,
except streaming.</p>

<p>I used my iPhone 4s as a remote and as a Netflix source to stream to
my TVs. The novelty of this quickly wore off, so I started looking
around for other uses. This is when I realized I&rsquo;d like to install it
in my car and stream to it, from another source. I have an iOS dock in
my car. Not one that connects to an existing stereo or cables, but is
instead a stereo designed to hold an iOS device internally (or a USB
drive, etc.). The idea for device reuse or specialized use would be to
allow to stream from one device to another. In my case, one iPhone to
another. This way, the music, etc. is on one device, but the output is
on another. This would make updating music and listening to it on the
car iPhone trivial, as the device would never need to have updated
manually, or if it did, it wouldn&rsquo;t be critical that be sync&rsquo;d every
night or even week. (Yes, a &ldquo;first world problem&rdquo; (FWP), but hey, most
technology fixes FWP these days&mdash;doesn&rsquo;t it? Not many Pinterest users
bragging about the bag of support rice they had dropped on their
head. Or maybe there are.)</p>

<h3>How to Stream</h3>

<p>Since we are writing an open source project, we can use a bunch of
open source libraries and tools. For the base streaming part, I&rsquo;ve
chosen to use <a href="https://github.com/abrasive/shairport">shairport</a>;
unfortunately, it does not support iOS out of the box, so we need to
make some modifications&mdash;which is actually a good thing: otherwise,
we&rsquo;d be done with the writing, right about now.</p>

<p><em>In progress</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ethical Computing]]></title>
    <link href="http://versionzero.github.io/blog/2014/12/27/ethical-computing/"/>
    <updated>2014-12-27T22:21:02-08:00</updated>
    <id>http://versionzero.github.io/blog/2014/12/27/ethical-computing</id>
    <content type="html"><![CDATA[<p>This essay is about performing and consuming computational cycles
ethically. Ethical computing is a means of computing with a focus on
reducing harmful externalities. We shall explore what an ethical
computation could look like from a variety of angles. We then argue
for a variety of means by which we might enable further development in
those areas.</p>

<!--more-->


<h2>Ethical Computation</h2>

<p>We shall explore each of the following topics in turn:</p>

<ol>
<li>The source of labor for the construction of physical computers</li>
<li>Sources of materials used in the construction of computer hardware</li>
<li>Sources of power used for the creation of computing cycles
(i.e. running the computer hardware)</li>
<li>Consumer, academic, industrial, and business influences on the
in-expense of computing products</li>
</ol>


<p>Later. we shall discus some possible solutions and , including:</p>

<ol>
<li>Frugal computing: the re-purposing of old computer hardware to
offset the costs associated with the disposal as well as powering
the hardware.</li>
</ol>


<p>We will focus on <em>popular</em> account of this issue, rather than a
densely inassesible accademic treatment. Not that we believe this will
lessen the power of the argument; we hope, instead, to make it more
readable and multimedia sourced. Using news articles and video sources
from TEDx, etc. we hope to broaden the audience and impact for this
topic. We believe this more important than the strict rigor of
academia&hellip; for the time being.</p>

<h2>Sources of Labor</h2>

<p>We begin with the human means of production. The party-line tells us
sweatshops are bad, immoral, unethical, torturous, etc.. The opposite
has been argued by
<a href="https://www.ted.com/talks/leslie_t_chang_the_voices_of_china_s_workers?language=en">Leslie T. Chang</a>:
According to Chang, the sweatshops can enable upward social,
economic. and educational movement&mdash;even if not in every instance. In
other words, the jobs create a more educated and highly skilled
workforce, and open up new possitions for further future workforce
accention. Clearly, this is not the whole picture: not all workers get
out, not all places are good or even comprehendible places to work;
however, that there exists exceptions is hopeful. It means there are
examples for new companies to sustain cheap labour, without
nessesarily being compromizingly opressive and exploitative&mdash;though
they still might be considered these things, by &ldquo;western&rdquo; standards.</p>

<p><em>In progress</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LogonUI.exe: Application Error, a Quick Fix]]></title>
    <link href="http://versionzero.github.io/blog/2014/12/24/logonui.exe-application-error-windows-10/"/>
    <updated>2014-12-24T01:05:02-08:00</updated>
    <id>http://versionzero.github.io/blog/2014/12/24/logonui.exe-application-error-windows-10</id>
    <content type="html"><![CDATA[<p>The sentiment, &ldquo;I get the LogonUI.exe error after the Windows 10 TP
setup,&rdquo; seems to be common. Fortunately, the solution is very straight
forward if you are on a Lenovo machine.</p>

<!--more-->


<p>Here are the steps that worked for me:</p>

<ol>
<li>Start Windows 10 in Safe-Mode. To do this, press and hold the left
shift key (the one you can use to turn caps lock on)</li>
<li>Once you have booted Windows in to Safe Mode, it is time to apply
the fix:

<ul>
<li>NOTE: The Uninstall tools will not work in Safe Mode. This is
because the Installer Service is not running, nor can it be
started in Safe Mode</li>
</ul>
</li>
<li>We use a very simple fix, in that we do nothing more than move the
offending applications out of the way, so they will not be found by
any of the startup processes. On a Lenovo machine, the offending
application&mdash;the fingerprint authentication tool&mdash;resides in
&ldquo;C:\Program Files\Lenovo&rdquo;. Remedying the problem is a simple as moving
the Lenovo directory to the desktop and rebooting</li>
<li>I have yet to replace the Lenovo finger-print application with an
equivalent package, but there seems to be some evidence to suggest
that the Windows 10 biometrics tools can be used on their own</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, World!]]></title>
    <link href="http://versionzero.github.io/blog/2014/12/03/hello-world/"/>
    <updated>2014-12-03T14:19:10-08:00</updated>
    <id>http://versionzero.github.io/blog/2014/12/03/hello-world</id>
    <content type="html"><![CDATA[<p>This is the token &ldquo;Hello, World!&rdquo; post. I&rsquo;m desperate for content, apparently.
There&rsquo;s clearly nothing pre-released about this.</p>

<p>Anyway, the hope and purpose of the site is to publish in-process work so I
can get feedback from anyone kind enough to provide some.</p>

<!--more-->


<p>The content of the site will vary wildly in terms levels of difficulty. I haven&rsquo;t
picked a single topic audience, which I&rsquo;m told is bad, but I think I&rsquo;ll make up for
it by covering a variety of interesting and worthwhile topics. To give you a feel
for the disparity: some articles will be about how to configure the Transmission
torrent software for secure downloads; on the other end of the spectrum, I&rsquo;ll be
writing about my own interesting in image quality metrics, optimization, programming,
building distributed systems, etc.</p>

<p>The best advice I can give a reader is this: only read what seems interesting
to you. Then, and I think more importantly, send me your thoughts on what I&rsquo;ve
written, even if you have nothing nice to say. Ok, well, maybe say one nice thing,
I do, after all, have feelings. But do be critical, all of this is meant to be
picked apart.</p>

<p>Wrapping it up: hope you enjoy some of what is contained herein; the whole point
is to try to reach other people.</p>

<p>Best,
-B</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Designing From What You Don't Want.]]></title>
    <link href="http://versionzero.github.io/blog/2013/06/29/designing-from-what-you-dont-want/"/>
    <updated>2013-06-29T09:04:00-07:00</updated>
    <id>http://versionzero.github.io/blog/2013/06/29/designing-from-what-you-dont-want</id>
    <content type="html"><![CDATA[<p>I don&rsquo;t know about you, but I very rarely know what I want.  Sometimes
this is because there are too many choices and I can&rsquo;t make up my
mind.  Other times, it&rsquo;s because I am genuinely too ignorant to know a
good thing when I see it.</p>

<p>This all happend sometime after my teenage years. At least then, in
spite of knowing less than I do now, I knew exactly what I wanted.
Actually, I should qualify that: I strongly (arrogantly?) believed I
knew what I wanted, because I knew <em>everything</em>. I miss the confidence
of youth.</p>

<p>Anyway, this is not a post about the constant uncertainty of adult
life.  There are plenty of those around to last us well in to the
introduction of the next species.</p>

<p>This post is about designing from what you <em>don&rsquo;t</em> want.</p>

<!--more-->


<p>So the idea is pretty simple: we all have years of experience doing
things we have not wanted to do.  Some of these activities have been
less scaring than others.  But again, this is not about emotional
states, well not entirely, this is about designing new things and
improving old ones.  What we aught to be doing is designing away the
things we do not like doing: it&rsquo;s much easier to identify particular
behaviour we find less than desirable than it is to fairly itemize the
things which we find desirable.</p>

<p>Ok, you might ask, how does this differ from the way we do things
already?  We all fix bugs, add convenience features, etc.. Don&rsquo;t these
satisfy the above design criteria?</p>

<p>Yes and no.</p>

<p>Yes, fixing a bug does remove an irritant, and adding new features to
do all sorts of wonderful things is great.  But with new features come
new irritants.  Our complete design philosophy is to fix broken things
and add new things. Features sell, bug-fixes retain. This is not a
state we should be satisfied with: just because it works, doesn&rsquo;t mean
it ain&rsquo;t broke.</p>

<p>What I&rsquo;m proposing is subtlety different: <em>remove</em> unnecessary parts,
steps, etc..  This is hardly a novel idea in and of its self, we all
learnt it as a child.  Or, at least, we brushed up against it.  That
punishment was not desirable thing.  Thus, could either behaved well,
or hide our punishable behaviour in a better way.  The same principle
applies: rather than enduring the process because of the outcome,
change the way it is done.</p>

<p>So it&rsquo;s at this point where we should stop and look at an example,
lest we allow the above sound like self-help session.</p>

<p>I hate keeping track of hours. Ok, not hate, that&rsquo;s too string: I just
find it tedious. I tend to either postpone doing it, or, because I&rsquo;ve
become so adept at ignoring it, I simply forget to do it.  But I can&rsquo;t
get rid of tracking hours.  It&rsquo;s part of my job, and it does help in
the long run: it lets us determine a better guess as to how long new
step will take to enact. (I don&rsquo;t get payed by the hour, so even that
is not an incentive.)</p>

<p>So how do I reconcile my distain for the activity and the benefits
that can be derived from it. I could, as my mother might say, learn to
<em>grin and bear it</em>; or, I could find a way to minimize the time that
is needed to be spent on that particular activity.</p>

<p>For me, the answer is simple: find or make new a tool.</p>

<p>I spend most of my working day using revision control tools or
rhythmically molesting my keyboard in an editor. Ideally, the new tool
would fit in this workflow.</p>

<p>If I was being honest, this is what I&rsquo;d want:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">git flow feature start something-cool
  <span class="c">#hack, hack, hack...</span>
git add cool.c
git ticket <span class="m">43</span> +4h
  <span class="c"># did something horribly wrong, how am I still allowed to write code?</span>
git ticket <span class="m">43</span> +1.5h
git ticket <span class="m">43</span> +5h
git ticket <span class="m">43</span> +20m
  <span class="c"># finally, it&#39;s fixed</span>
git flow feature finish something-cool</code></pre></div>


<p>Now, I&rsquo;m married to the sytax, I&rsquo;d prefer that an arbitrary ticket
number so associable with an arbitrary branch (including a ticket
branch).  Meaning the above could be simplified further:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">git flow feature start something-cool
git ticket associate 43
  <span class="c"># git-ticket: Active JIRA ticket 43</span>
git ticket 4h
  <span class="c"># git-ticket: Added 4 hours to JIRA ticket 43</span>
git ticket 20m
  <span class="c"># git-ticket: Added 20 minutes to JIRA ticket 43</span>
git flow feature finish something-cool
  <span class="c"># git-ticket: Active JIRA ticket 43</span>
  <span class="c"># git-flow: ...</span></code></pre></div>


<p>Further, since it&rsquo;s likely we will want to support more than one
project at a time.  This means we might run in to a situation where a
seperate, unrelated project needs to be updated with respect to hours.
Support for this case would take the following form:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">git flow feature start something-cool
gut ticket associate 43
  <span class="c"># git-ticket: Active JIRA ticket 43</span>
git ticket 4h
  <span class="c"># git-ticket: Added 4 hours to JIRA ticket 43</span>
git ticket <span class="m">545</span> 20m
  <span class="c"># git-ticket: Added 20 minutes to JIRA ticket 545</span>
git flow feature finish something-cool
  <span class="c"># git-ticket: Active JIRA ticket 43</span>
  <span class="c"># git-flow: ...</span></code></pre></div>


<p>Notice that while we update can update a ticket at anytime, it does
not mean we change the active ticket.  A sample use might be to do
something to a remote system at the command line, then adding time to
the ticket directly.  This bipasses the need to set the effemeral
ticket active: still, this is seems like the correct behaviour for
many cases.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS Gets Cilk++ Support via Clang and LLVM]]></title>
    <link href="http://versionzero.github.io/blog/2013/03/24/mac-os-gets-cilk-plus-plus-support-via-clang-and-llvm/"/>
    <updated>2013-03-24T17:35:00-07:00</updated>
    <id>http://versionzero.github.io/blog/2013/03/24/mac-os-gets-cilk-plus-plus-support-via-clang-and-llvm</id>
    <content type="html"><![CDATA[<p>Part of my yet un-finished graduate work involved using a combination
of threading and cache-oblivious algorithms to improve the performance
of various linear algebra computations on sparse data sets.  During
the course of my work, I used a few concurrency models, including
Intel&rsquo;s <a href="http://cilkplus.org">Cilk Plus</a> data and task parallelism
techniques.</p>

<p>Recently, the <a href="http://cilkplus.github.com">Cilk Plus language extensions were introduced to the Clang frontend for LLVM</a>.  Which mean it
was available on Darwin.  Though the <a href="http://gcc.gnu.org/svn/gcc/branches/cilkplus/">Cilk Plus extensions and runtime have been available in GCC</a> for some time,
building the GCC code on Darwin proved to be non-trivial. (For me, at
least&mdash; the Linux build was far easier.)  The introduction of Cilk
Plus in Clang allows for easy compilation and use on the Darwin
platform.</p>

<!--more-->


<p>I used the instructions given on the new <a href="http://cilkplus.github.com">Cilk Plus/LLVM GitHub site</a>
to try a copy of the compiler on my local machine.</p>

<p>The current implementation only provides support for a subset of the
Cilk Plus language extensions: <code>cilk_spawn</code>, <code>cilk_sync</code>, and
<code>hyperobjects</code>.  Leaving features like <code>cilk_for</code>, array notation and
SIMD work for future releases.  Despite the not providing a full
feature-set, the Cilk Plus/LLVM tools can already be used to make
non-trivial parallel programs.</p>

<p>I dusted off some benchmarking code I used for previous experiments
and gave it a go on my laptop.  While not a high-performance big-steel
machine, my laptop does weigh in well with 16GB of RAM and a quad-core
Intel i7.</p>

<p>The code I ran uses a well-known matrix multiplication algorithm&mdash;
<a href="http://en.wikipedia.org/wiki/Strassen_algorithm">Strassen&rsquo;s algorithm</a>&mdash;to
create large parallel workloads.  The code was based on example code
shipped with the original 1996 <a href="http://supertech.csail.mit.edu/cilk/">MIT Cilk language and runtime</a>.  I modified the code
slightly to include the new language extensions as well as to provide
slightly more performance information. (I&rsquo;ll post the changes
shortly.)</p>

<p>I ran the code through a variety of benchmarks, which I&rsquo;ve included
bellow.</p>

<p><img src="http://versionzero.github.io/images/speed-up.png" title="Speedup of Strassen's Algorithm with
 Cilk Plus/LLVM" alt="speedup" /></p>

<p>The legend labels describe the size of the matrices being used.  For
instance, 1024 mean that Strassen&rsquo;s Algorithm is being run using
inputs of size 1024 by 1024.  Notice we don&rsquo;t achieve linear
<a href="http://en.wikipedia.org/wiki/Speedup">speedup</a>, but we do get very
close.  I think with a little extra fine tuning (1) and the explicit
use of some SIMD instructions, near-linear speedup could be
achieved. If you want the data, you can get it
<a href="http://versionzero.github.io/files/llvmcilk-results.xlsx">here</a>.</p>

<ol>
<li>Yes, I know: cache oblivious algorithms aren&rsquo;t <em>supposed</em> to
require tuning.  In practice, unfortunately, they do.  Maybe not as
much tuning as their cache aware brethren, but still the require some.
Even the original MIT code had some tuning code in it, so I&rsquo;m not
alone in thinking it necessary.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Towards a Working Raspberry Pi In-car Computer]]></title>
    <link href="http://versionzero.github.io/blog/2013/02/24/towards-a-working-rpi-in-car-computer/"/>
    <updated>2013-02-24T19:52:00-08:00</updated>
    <id>http://versionzero.github.io/blog/2013/02/24/towards-a-working-rpi-in-car-computer</id>
    <content type="html"><![CDATA[<p>Ever since I purchased my latest vehicle, I&rsquo;ve been working on a
little side project to interface directly with the vehicle&rsquo;s on-board
computer.</p>

<p>The task itself is pretty straight forward: buy device capable of
plugging in to the vehicle&rsquo;s ODB2 port, and run some free or
inexpensive Android app to gather the information.</p>

<p>Unfortunately, the above process requires a great deal of user
intervention.  First, you must always plug and unplug the ODB2 device.
Second, you must either have an Android device on your person or in
the vehicle capable of running the required software or a computer
with a variety of command-line tools installed.  The latter is
impractical, and the former is error prone (I&rsquo;ll forget to start the
app, take the readings, etc.) and tedious (The data must later be
extracted from the app manually, or a web-service must be made
available to push the data to&ndash; which also requires a data plan, if
the car is not always in the proximity of a wifi access point).</p>

<p>Raspberry Pi to the rescue.</p>

<!--more-->


<p>The <a href="http://www.raspberrypi.org">Raspberry Pi</a> is a small, inexpensive
low-power computing machine.  It was originally developed with
teaching in mind, but sparked an enormous hobby market.  The Raspberry
Pi, or raspi for short, is available in two models: Model A is $25 the
Model B is $35. The differences between the models is nominal: the
more expensive one has more USB ports, more RAM and an Ethernet port.
As a developer, the Model B is preferable, since it provides easy
extension through USB and trivial network access via ethernet, not to
mention more room to write sloppier prototype code in the roomy 512MB
main memory.  The Model A would be best suited to production or
permanent projects, post development.  (Not true in all cases: having
network access can be critical for some applications&ndash; though a USB
wireless dongle may mediate this issue.)</p>

<p>I purchased two of the $35 Model Bs, for a separate project, but
quickly found that they would be a good fit for a variety of computing
projects.  One of these projects ended up being the computer for my
vehicle.</p>

<p>The original intention of car computer was to keep track of details
that were important to me, but slightly time consuming and tedious.
One simple motivating example was tracking fuel economy.  It&rsquo;s a
simple calculation to make, record and compare to previous trips.  But
why bother doing this work by hand if it will eventually end up in a
computer, if the computer itself can gather and tabulate the data
automatically.  It&rsquo;s hardly an earth shattering improvement, but led
to further ideas.  For instance: it would be great to know <em>where</em>,
<em>when</em> and <em>why</em> the vehicle experiences the worst fuel economy.  By
taking additional data samples, like location, speed, temperature,
time, and a variety of engine performance metrics, a very clear
picture of how a vehicle performs will emerge.</p>

<p>Towards these ends, I&rsquo;ve been configuring a raspi to read from a
Bluetooth ODB2 adapter and stash the information until it can be
transferred to my home network for processing.</p>

<p>The idea is simple: poll the ODB2 adapter periodically for all data it
can return.  Simultaneously poll a GPS unit and stash the correlated
data locally on the raspi device.  If and when my home network is
within range, join the wireless network and transfer the collected
data for processing.</p>

<p><em>more on the way</em></p>

<h2>Configuration</h2>

<h3>USB Hub Configuration</h3>

<p>The first problem I ran in to was that the cheap USB Bluetooth dongle
I purchased was not well received by my raspi.  Fortunately, like many
things, I was not the only one who had this issue.  A quick web-search
away turned up the <a href="http://raspberrypi.stackexchange.com/questions/1886/what-kernel-parameters-are-available-for-fixing-usb-problems">solution</a>:
the USB hub&rsquo;s speed had to be turned down to the USB 1.1 standard, as
the 2.0 standard was known to no play well with some cheap devices.</p>

<p>The fix was simple, once I found it, and only involved changing a few
boot variables the kernel uses to initialize hardware on boot.  In
particular, I changed:</p>

<ul>
<li><code>dwc_otg.speed</code>: 1 will limit USB speed to full speed 12Mbps (USB 1.1).</li>
<li><code>dwc_otg.microframe_schedule</code>: 1 (default now) This should fix the
error when too many periodic endpoints are present.</li>
</ul>


<h3>Bluetooth Configuration</h3>

<p>Having no documentation on the ODB2 sensor I purchased, I used the
<code>sdptool</code> to tell me a little about the device.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>sudo sdptool records 00:19:5D:27:12:6E
...
Service Name: SPP Dev
Service RecHandle: 0x10002
Service Class ID List:
  <span class="s2">&quot;Serial Port&quot;</span> <span class="o">(</span>0x1101<span class="o">)</span>
Protocol Descriptor List:
  <span class="s2">&quot;L2CAP&quot;</span> <span class="o">(</span>0x0100<span class="o">)</span>
  <span class="s2">&quot;RFCOMM&quot;</span> <span class="o">(</span>0x0003<span class="o">)</span>
    Channel: 1
Language Base Attr List:
  code_ISO639: 0x656e
  encoding:    0x6a
  base_offset: 0x100</code></pre></div>


<p>It&rsquo;s not a hugely informative dump of information&mdash;in fact it&rsquo;s
downright cryptic&mdash;but it does provide us with the protocol and
channel to connect with.</p>

<p>By configuring <code>/etc/bluetooth/rfcomm.conf</code> correctly, we get a device
<code>/dev/rfcomm0</code>.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">rfcomm0 <span class="o">{</span>
  <span class="nb">bind </span>yes<span class="p">;</span>
  device 00:0D:3F:45:DF:8A<span class="p">;</span>
  channel 1<span class="p">;</span>
  comment <span class="s2">&quot;ODB2 Sensor&quot;</span><span class="p">;</span>
<span class="o">}</span></code></pre></div>


<p>Then we only need to restart the bluetooth service:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>sudo systemctl stop  bluetooth.service <span class="o">&amp;&amp;</span> <span class="se">\</span>
  sudo systemctl start bluetooth.service</code></pre></div>


<p>Eventually one could use the command:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>sudo rfcomm <span class="nb">bind </span><span class="m">0</span> 00:15:A0:7A:90:F2 1</code></pre></div>


<p>Where the 0 is the device suffix, the hardware address is that of the
ODB2 sensor and the 1 is the channel we want to connect on.  We should
now see the RFCOMM device available for use:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>ls -l /dev/rfcomm0 
crw-rw---- <span class="m">1</span> root uucp 216, <span class="m">0</span> Jan  <span class="m">1</span> 01:14 /dev/rfcomm0</code></pre></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using C++ Templates to Generate Compile-time Arrays]]></title>
    <link href="http://versionzero.github.io/blog/2013/02/17/using-c-plus-plus-templates-to-generate-compile-time-arrays/"/>
    <updated>2013-02-17T09:22:00-08:00</updated>
    <id>http://versionzero.github.io/blog/2013/02/17/using-c-plus-plus-templates-to-generate-compile-time-arrays</id>
    <content type="html"><![CDATA[<p>There was huge amount of attention payed to template meta-programming
in C++ within recent history.  The idea was to let the compiler do
some additional work upfront so that the runtime environment would be
then forever relived of the need to fill the same role.</p>

<!--more-->


<p>The goto example in Computer Science for recursion is to list the
first <em>n</em> <a href="http://en.wikipedia.org/wiki/Fibonacci_number">Fibonacci</a>
numbers. It&rsquo;s easy to see why this is done, the code is very simple
and highly readable:</p>

<div class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="kt">int</span> <span class="nf">fib</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></div>


<p>Of course, we would never actually do this in practice&ndash;since it
inefficient&ndash;but it does nicely illustrate the beauty of simplicity of
recursion.  It&rsquo;s fitting then, that we try using the same example to
use the same function to illustrate compile-time array generation.</p>

<p>Note that <code>gcc</code>/<code>clang</code> users will not be able to take advantage of
this, as it seems to only be a &ldquo;feature&rdquo; of the Microsoft C++
compiler.  It&rsquo;s also non-standard, so it&rsquo;s unlikely to work at any
point in the future.</p>

<div class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">&gt;</span>
<span class="k">struct</span> <span class="n">fibonacci_numbers</span> <span class="p">{</span> 
    <span class="k">static</span> <span class="k">const</span> <span class="n">T</span> <span class="n">end</span> <span class="o">=</span> <span class="n">fibonacci_numbers</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">&gt;::</span><span class="n">end</span>
        <span class="o">+</span> <span class="n">fibonacci_numbers</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="o">&gt;::</span><span class="n">end</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span> <span class="k">struct</span> <span class="n">fibonacci_numbers</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="mi">2</span><span class="o">&gt;</span> <span class="p">{</span> <span class="k">static</span> <span class="k">const</span> <span class="n">T</span> <span class="n">end</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="p">};</span>
<span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span> <span class="k">struct</span> <span class="n">fibonacci_numbers</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="mi">1</span><span class="o">&gt;</span> <span class="p">{</span> <span class="k">static</span> <span class="k">const</span> <span class="n">T</span> <span class="n">end</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="p">};</span>
<span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span> <span class="k">struct</span> <span class="n">fibonacci_numbers</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="mi">0</span><span class="o">&gt;</span> <span class="p">{</span> <span class="k">static</span> <span class="k">const</span> <span class="n">T</span> <span class="n">end</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="p">};</span></code></pre></div>


<p>The code uses a few tricks to accomplish it&rsquo;s job: We use partial
specialization to help define the base case of the recursion.  This
can be seen in the last three lines, where the numbers listed
coincide with the conditions in the original code.</p>

<p>The more surprising property we take advantage of is that the MS C++
compiler allocates storage in the stack for the <code>end</code> member of
<code>fibonacci_numbers</code>.  Thus, since we are recursively defining
instances of the <code>fibonacci_numbers</code> structure, the compiler allocates
stack storage for each definition.</p>

<p>Once compiled, accessing the data must be done in reverse, due to the
nature of the template recursion.  The following loop prints the first
12 Fibonacci numbers:</p>

<div class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="kt">int</span> 
<span class="nf">main</span> <span class="p">()</span> 
<span class="p">{</span> 
  <span class="n">fibonacci_numbers</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="mi">12</span><span class="o">&gt;</span> <span class="n">fibonacci</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="n">i</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="o">*</span><span class="p">((</span><span class="o">&amp;</span><span class="n">fibonacci</span><span class="p">)</span><span class="o">-</span><span class="n">i</span><span class="p">)).</span><span class="n">end</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>


<p>It&rsquo;s not pretty, but it is effective.  It should be easy to write an
iterator wrapper for the above code, but I&rsquo;ll leave that for a future
post or update.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finding Balance Between Local and Remote Terminal Sessions]]></title>
    <link href="http://versionzero.github.io/blog/2013/02/17/finding-balance-between-local-and-remote-terminal-sessions/"/>
    <updated>2013-02-17T08:27:00-08:00</updated>
    <id>http://versionzero.github.io/blog/2013/02/17/finding-balance-between-local-and-remote-terminal-sessions</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Recently, a number of our externally visible school machines were
compromised. It is not clear the extent of the attacks effect, but
from some of the details I did get, it sounds like the work of an
amateur. Either way, the point of this article is not to speak to this
issue directly, but rather focus on the inconvenience of having some
of the host names you are accustomed to having access to suddenly
disappear. To be clear, this is not an article complaining about
having to change the hostnames we use on the command line, but ones
that we have embedded in scripts and configuration files.</p>

<p>I know I am not the only one who was caught by this, but it is not
clear if others where as throughly irritated by the change. I do a
great deal of work remotely and, as such, I am highly dependant on the
stability of the set of host names I use. So, in order to protect
myself from any similar future mishaps, I made a few changes to the
way I work.</p>

<p>It is not clear if my approach is particularly novel, but I&rsquo;ve not
seen it listed elsewhere, so I thought I would document it for others
to try. It occurred to me that I could easily bypass these issues by
simply running a local load balancer that balances over all the remote
school hosts. There are a number of issues that crop up using this
approach, and I will try to address them as thoroughly as possible.</p>

<!--more-->


<h2>Finding Balance</h2>

<p>First things first: the software. I used an appropriately named tool
<a href="http://www.inlab.de/balance.html">Balance</a>. As the name implies, it
is a load balancer&ndash;and a very simple and successful one at that. I
used my trusty old package manager to install it, but building it from
source would be equally appropriate.</p>

<p>The syntax for Balance is very simple, so we can discuss it very simply:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>balance <span class="m">2222</span> linux1.example.com:22 linux2.example.com:22 linux3.example.com:22</code></pre></div>


<p>,</p>

<p>This tells Balance that connections to the local port 2222 should be
forwarded in an alternating fashion to port 22 on
<code>linux1.example.com</code>, <code>linux2.example.com</code> and
<code>linux3.example.com</code>. Furthermore, it tells Balance implicitly to run
in the background.</p>

<p>Balance can be told to bind to the local port explicitly, via the -b
option, but I generally only have one network adapter active at any
one time, so calls to <code>bind()</code> will fail because it will be attempting
to bind to the same local port on the same IP address. There are ways
to get around this limitation, by
<a href="http://www.xenocafe.com/tutorials/linux/redhat/bind_multiple_ip_addresses_to_single_nic/index.php">binding multiple IP addresses to a single network adapter</a>.
I chose not to take this route, however, as it seems needlessly
complex for my needs. Anyway, moving on.</p>

<h2>Automation</h2>

<p>Now that we have established how to balance over a number of remote
hosts, we would probably like to automate the whole thing. For my
purposes, I added something similar what follows to my shell
profile. I have removed my comments to improve readability, but I will
expand on the behaviour following the code.</p>

<p>We start by choosing a port >1000. Doing this means we do not need to
run our scripts with a super user privileges. The main benefit of this
is simplicity. That being said, I can think of no good reason for
choosing a sub-1000 port, except that we would not be required to
explicitly state which port to use when using <code>ssh</code> (more on this point
later). Furthermore, using a sub-1000 port would likely require
additional security considerations that I don&rsquo;t care to think about
right now.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">LOCAL</span><span class="o">=</span>2222
<span class="nv">REMOTE</span><span class="o">=</span>22</code></pre></div>


<p>Next we build a list of all the destination servers we will &ldquo;load
balance&rdquo; over. Balance will just round-robin over them: if one is
down, it will move on to the next. This makes it simple for writing
scripts that depend on a host name: i.e. there is no need to write
ugly fail-over code. Note that I have listed the server names in
decreasing order. I do this because it seems that most people that
work remotely tend towards using the lower numbered hosts first. So in
some sense this is just a naive heuristic for finding unloaded
systems, without foreknowledge of the systems&#8217; load.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">SERVERS</span><span class="o">=</span>
<span class="k">for</span> i in <span class="o">{</span>1..3<span class="o">}</span><span class="p">;</span> <span class="k">do</span>
    <span class="nv">SERVERS</span><span class="o">=</span><span class="s2">&quot;linux${i}.example.com:${REMOTE} ${SERVERS}&quot;</span>
<span class="k">done</span></code></pre></div>


<p>The final step is to start Balance. But before we try to start the
Balance, we should check if it is already running. If we do not do
this, Balance will attempt to bind to a port that is already bound,
and die a very ungraceful and uninformative death:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">bind</span><span class="o">()</span>: Address already in use</code></pre></div>


<p>We also need to check that the instance of Balance is ours. If it is
not, then we will need to spawn our own. The procedure bellow is not
fool-proof, mind you, but it should work for our limited purposes. The
solution can always be made more robust as the need arises.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">PID</span><span class="o">=</span><span class="sb">`</span>pidof <span class="p">|</span> grep <span class="k">${</span><span class="nv">USER</span><span class="k">}</span> <span class="p">|</span> grep balance <span class="p">|</span> awk <span class="s1">&#39;{ printf $2 }&#39;</span><span class="sb">`</span>
<span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;${PID}x&quot;</span> <span class="o">==</span> <span class="s2">&quot;x&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
    balance <span class="k">${</span><span class="nv">LOCAL</span><span class="k">}</span> <span class="k">${</span><span class="nv">SERVERS</span><span class="k">}</span>
<span class="k">fi</span></code></pre></div>


<p>So that is it for getting Balance up and running. Once we have spawned
Balance, we can check on it fairly simply using ps:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>ps ax <span class="p">|</span> grep <span class="o">[</span>b<span class="o">]</span>alance
 <span class="m">80989</span> s001  S      0:00.04 balance <span class="m">2222</span> linux3.example.com:22 linux2.example.com:22 linux1.example.com:22</code></pre></div>


<p>The <code>[b]alance</code> notation stops <code>grep</code> from matching itself. This trick
works because the command line for <code>grep</code> no long contains the pattern
being matched.</p>

<h2>Usage</h2>

<p>Now we would like to actually make use of our new load balancer. We
could use the new port and localhost name directly with ssh, but this
can be a tad cumbersome, and easy to forget to do:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>ssh localhost -p 2222</code></pre></div>


<p>It also suffers from a far worse problem. This command line will work
the first time, but will likely fail on subsequent invocations. The
reason for this should be clear from the error message:</p>

<pre>
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!
Someone could be eavesdropping on you right now (man-in-the-middle attack)!
It is also possible that the RSA host key has just been changed.
The fingerprint for the RSA key sent by the remote host is
33:ab:39:23:6f:4a:d9:86:bb:de:fe:2d:1f:6a:35:4d.
Please contact your system administrator.
Add correct host key in /home/user/.ssh/known_hosts to get rid of this message.
Offending key in /home/user/.ssh/known_hosts:42
RSA host key for [localhost]:2222 has changed and you have requested strict checking.
Host key verification failed.
</pre>


<p>What has happend is that we have moved on to a different host in the
list of candidate hosts we defined above. So the warning is
effectively a red-herring: in the general case, it is not that the
host&rsquo;s key has changed, but that we are looking at a new host, but
considering it the same host as the previous one.</p>

<p>We can fix this by telling ssh to disable strict host checking for the
localhost:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>ssh localhost -p <span class="m">2222</span> -o <span class="nv">NoHostAuthenticationForLocalhost</span><span class="o">=</span>yes</code></pre></div>


<p>This command will always work, but it is a rather unruly beast to type
each time we want to login remotely. We could of course just write an
alias for our shell, but this limits, in some sense, the flexibility
of our configuration. Thus, we turn to the ssh_config file for further
inspiration.</p>

<h2>SSH Configuration</h2>

<p>I typically have a number of different user accounts on various
different systems. I will not get in to the virtues of working this
way, as I am sure that would take up as much space as this article
has, and it is not entirely clear to me that many people would in fact
agree that this is a good idea. We shall just settle with the fact
that I do it, and I need my environment to allow me to work on many
accounts transparently.</p>

<p>The <code>ssh_config</code> file allows a user to define a set of hosts, and
the options to go with them. We could, for instance, have two users
<strong>user1</strong> and <strong>user2</strong> configured to use the same set of hosts:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">Host user1
    HostName localhost
    User user1
    Port 2222
    NoHostAuthenticationForLocalhost yes

Host user2
    HostName localhost
    User user2
    Port 2222
    NoHostAuthenticationForLocalhost yes</code></pre></div>


<p>Note that we actually use the user names in place of the host
names. This makes connecting to the load balanced hosts very
simple. For instance, to log as <strong>user1</strong> we would type the following:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>ssh user1</code></pre></div>


<p>Which is a far cry from the command line we required just a few
minutes before. We can do the same for <strong>user2</strong> and we could also add
more hosts, and more options, but I will save that all for another
time.</p>

<h2>Making the Leap</h2>

<p>None of my office machines are public facing, so they require a second
hop once I&rsquo;ve logged in to the public machines. This can get a little
tiresome to type if you end up working remotely a lot, like I do.</p>

<p>To save myself a few keystrokes, I add the following entry to my
<code>~/.ssh/config</code> file:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">Host user3
    HostName localhost
    User user3
    Port 2222
    NoHostAuthenticationForLocalhost yes

Host office
    HostName private1.example.com
    User private1
    Port 22
    <span class="c"># I actually really just want to hop from the public facing linux</span>
    <span class="c"># machines to my office machine</span>
    ProxyCommand ssh -q user3 nc -p0 %h %p</code></pre></div>


<p>Where <code>nc</code> is a tool by the name netcat, a very hand network
listener/sender/swiss army knife. Now, thanks to the simple
configuration above, all I need to write is:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>ssh office</code></pre></div>


<p>and I&rsquo;ll be connected directly to the workstation in my office.</p>

<h2>Security</h2>

<p>There is one last issue that I have been silently ignoring. The astute
reader may have noted that we can no longer detect legitimate
person-in-the-middle attacks, because we have explicitly told ssh not
to authenticate host identities. I purposely ignored this issue for
various reasons, arguably the most important one, to me, is that
accounting for it would greatly complicate the whole article. Time
permitting and cleverness permuting, I will try to address this
shortcoming in a future article.</p>

<h2>Code</h2>

<p>As per usual, the code for all my work is freely available online. If
you want to look at my implementation of these ideas in particular,
point your browser at the following two pages:</p>

<ul>
<li><a href="https://github.com/versionzero/dotfiles/blob/master/profile.d/90ssh-balancer.sh">SSH Load Balancing</a> (<a href="https://github.com/versionzero/dotfiles/raw/master/profile.d/90ssh-balancer.sh">raw</a>)</li>
<li><a href="https://github.com/versionzero/dotfiles/blob/master/ssh/config">SSH Configuration File</a> (<a href="https://github.com/versionzero/dotfiles/raw/master/ssh/config">raw</a>)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Google as a Command-line Spell-checker]]></title>
    <link href="http://versionzero.github.io/blog/2013/02/16/using-google-as-a-command-line-spell-checker/"/>
    <updated>2013-02-16T19:08:00-08:00</updated>
    <id>http://versionzero.github.io/blog/2013/02/16/using-google-as-a-command-line-spell-checker</id>
    <content type="html"><![CDATA[<p>At the best of times, I can maintain a mediocre level of control of
the English language.  Unfortunately, this has not translates in to an
ability to spell.</p>

<p>For most applications, this is fine, there&rsquo;s a reasonable spellchecker
built in to just about everything.  It&rsquo;s a problem for me when I&rsquo;m at
the terminal all day though.  It&rsquo;s true, there are plenty of command
line checkers, but it&rsquo;s rare that any can handle the level of
misspelling I feed them.  To date, the most capable system of parsing
my spelling is Google.  But switching to a browser and feeding in a
word at a time is a tad cumbersome, to say the least.</p>

<!--more-->


<p>This was the original impetus for the code.  It&rsquo;s a glorified cURL
call, but it does the trick.  It also became quite clear that for a
little extra work, we could detect things like the Urban Dictionary
(Dirionary) results as part of of the page.</p>

<p>For simplicity, we assume the following phrase will remain stable:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Did you mean to search for:[ ]*([^ ]*).*</span></code></pre></td></tr></table></div></figure>


<p>This can make our code much simpler and easier to follow. It also
seem, that in the long run, unless many people adopt this method of
word-recommendation search, Google&rsquo;s only changes will be for
aesthetic reasons, and considering their overal minimalistic approach
to data display, we should be able to actually quite easily update
this in the future, even it if is a major word order change.</p>

<p>Where the above line shows up if Google is <em>guessing</em> (aka &ldquo;recall
that that word is actually spelt.&rdquo;), the following is likely when the
&ldquo;optimal&rdquo; match is found, according to its rule-set:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Showing results for[ ]*([^ ]*)</span></code></pre></td></tr></table></div></figure>


<p>Lastly, for now, if we don see anything from Google proper, then we
may be looking for a piece of slang, so we will use the result of our
trusty old friend, Urban Dictionary:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Urban Dictionary:[ ]*([^ ]*)</span></code></pre></td></tr></table></div></figure>


<p>The link to the full code can be found bellow, but the critical code
is here:</p>

<div class="highlight"><pre><code class="language-perl" data-lang="perl"><span class="lineno"> 1</span> <span class="k">my</span> <span class="nv">@patterns</span> <span class="o">=</span> <span class="p">(</span>
<span class="lineno"> 2</span>    <span class="s">&quot;Did you mean to search for:[ ]*([^ ]*).*&quot;</span><span class="p">,</span>
<span class="lineno"> 3</span>    <span class="s">&quot;Showing results for[ ]*([^ ]*)&quot;</span><span class="p">,</span>
<span class="lineno"> 4</span>    <span class="s">&quot;Urban Dictionary:[ ]*([^ ]*)&quot;</span><span class="p">);</span>
<span class="lineno"> 5</span> <span class="nb">open</span> <span class="p">(</span><span class="n">OUTPUT</span><span class="p">,</span> <span class="s">&quot;| tee $cache_filename&quot;</span><span class="p">);</span>
<span class="lineno"> 6</span> <span class="k">while</span> <span class="p">(</span><span class="sr">&lt;INPUT&gt;</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno"> 7</span>   <span class="nb">chomp</span><span class="p">;</span> <span class="sr">s/&lt;[^&gt;]*&gt;/ /g</span><span class="p">;</span>
<span class="lineno"> 8</span>   
<span class="lineno"> 9</span>   <span class="c1"># Check each of the patterns we defined above:</span>
<span class="lineno">10</span>   <span class="k">for</span> <span class="k">my</span> <span class="nv">$pattern</span> <span class="p">(</span><span class="nv">@patterns</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno">11</span>     <span class="k">if</span> <span class="p">(</span><span class="sr">/$pattern/</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno">12</span>       <span class="nv">$suggestion</span> <span class="o">=</span> <span class="s">&quot;$1&quot;</span><span class="p">;</span>
<span class="lineno">13</span>       <span class="k">last</span><span class="p">;</span>
<span class="lineno">14</span>     <span class="p">}</span>
<span class="lineno">15</span>   <span class="p">}</span>
<span class="lineno">16</span> <span class="p">}</span>
<span class="lineno">17</span> <span class="k">print</span> <span class="n">OUTPUT</span> <span class="s">&quot;$suggestion&quot;</span><span class="p">;</span></code></pre></div>


<p>Notice we strip all HTML from the document, so it is easier to parse.
It is odd that web-scrapping can come to this, where it just makes
more sense to strip all that is <em>structured</em> to work with simpler
structure.  Is this what people call irony?</p>

<p>The full code can be seen
<a href="https://raw.github.com/versionzero/dotfiles/master/local/bin/google-suggest">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Note About Me]]></title>
    <link href="http://versionzero.github.io/blog/2013/02/16/a-note-about-me/"/>
    <updated>2013-02-16T18:20:00-08:00</updated>
    <id>http://versionzero.github.io/blog/2013/02/16/a-note-about-me</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been using computers for as long as I can remember.</p>

<p>I broke and fixed my first computer at the age of 7, and I&rsquo;ve been
hooked ever since.  It has been a while since I concentrated strictly
on the internals of machines. I became fascinated with software
construction at age 10, after joining a school computer club. We
learnt how to use our trigonometry lessons to make something happen on
the screen. It was never fast nor pretty but it is was fun.</p>

<!--more-->


<p>I have long stopped keeping up with the latest hardware
releases. Instead, I focus on the architecture I am currently
targeting. Despite not attending to the latest trends in consumer
hardware, I still keep myself informed about larger trends or shifts
in hardware design. I am currently particularly interested in multi­
and many-core systems: from how their cache and register memory is
arranged, what new concurrency primitives the cores support, all the
way to how they shepherd bits between cores and even other physical
CPUs.</p>

<p>I&rsquo;ve been developing software professionally for almost 17 years
now. I&rsquo;ve written critical systems-level code; database applications;
elaborate, native and aesthetically pleasing graphical user
interfaces; highly parallel and distributed systems; as well as basic
utilities to help myself and others close to me perform everyday task
more pleasantly. Many of these projects have been developed using a
variety of languages and a diverse set of tools. The remaining ones
were written in C.</p>

<p>I prefer to use stable languages and mature tools for &ldquo;production&rdquo;
code. However, experimenting with new languages and novel tools for
small projects is something I continue to do often&ndash;for better or
worse. Ultimately though, I like writing: I like writing code, I like
writing about code, I like writing documentation for code, and I adore
writing tutorials on how to use code. The latter two tend to suffer
the most when I am busy, but only because it is usually the part that
requires the most care to get correct. As far as I can tell, there are
no automated tests for good explanations.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Locking Down Darwin]]></title>
    <link href="http://versionzero.github.io/blog/2012/08/20/locking-down-darwin/"/>
    <updated>2012-08-20T20:42:00-07:00</updated>
    <id>http://versionzero.github.io/blog/2012/08/20/locking-down-darwin</id>
    <content type="html"><![CDATA[<p>Darwin/OS X ships with some fairly permissive settings on some fairly
dangerous tools. Which this needs a whole lot more work, the following
script does a good job of securing a basic Darwin/OS X installation.</p>

<!--more-->




<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;root&quot;</span> !<span class="o">=</span> <span class="sb">`</span>whoami<span class="sb">`</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
    <span class="nb">echo</span> <span class="s2">&quot;Must be root!&quot;</span> 2&gt;/dev/null
    <span class="nb">exit </span><span class="m">1</span> 
<span class="k">fi</span>

<span class="c">##</span>
<span class="c"># Allow only root to run &quot;at&quot; and &quot;cron&quot;</span>
<span class="c">##</span>

rm -f /var/at/at.deny 2&gt;/dev/null
rm -f /var/cron/deny 2&gt;/dev/null
<span class="nb">echo</span> <span class="s2">&quot;root&quot;</span> &gt;/var/at/at.allow
<span class="c">#echo &quot;root&quot; &gt;/var/cron/allow</span>

<span class="c">##</span>
<span class="c"># Set some sane permissions</span>
<span class="c">##</span>

<span class="k">function</span> _chmod <span class="o">()</span> <span class="o">{</span>
    chmod <span class="s2">&quot;$@&quot;</span> 1&gt;/dev/null 2&gt;<span class="p">&amp;</span>1
<span class="o">}</span>

_chmod <span class="m">600</span> /etc/cron*
_chmod <span class="m">600</span> /var/cron/deny
_chmod <span class="m">600</span> /var/cron/allow
_chmod <span class="m">600</span> /etc/ftpusers
_chmod <span class="m">600</span> /etc/inetd.conf
_chmod <span class="m">600</span> /etc/syslog.conf

_chmod <span class="m">750</span> /sbin/dumpfs
_chmod <span class="m">750</span> /usr/sbin/fdisk
_chmod <span class="m">750</span> /sbin/fsck
_chmod <span class="m">750</span> /sbin/fsck_hfs
_chmod <span class="m">750</span> /sbin/fsck_msdos
_chmod <span class="m">750</span> /sbin/halt
_chmod <span class="m">750</span> /sbin/ifconfig 

_chmod <span class="m">750</span> /usr/bin/lpq
_chmod <span class="m">750</span> /usr/bin/lprm
_chmod <span class="m">4750</span> /usr/bin/lpr
_chmod <span class="m">700</span> /usr/bin/script

_chmod <span class="m">750</span> /usr/sbin/edquota
_chmod <span class="m">2750</span> /usr/sbin/lpc
_chmod <span class="m">750</span> /usr/sbin/named
_chmod <span class="m">750</span> /usr/sbin/nmbd
_chmod <span class="m">750</span> /usr/sbin/ntpdate
_chmod <span class="m">750</span> /usr/sbin/ntptrace
_chmod <span class="m">750</span> /usr/sbin/pppd
_chmod <span class="m">750</span> /usr/sbin/rpcinfo
_chmod <span class="m">750</span> /usr/sbin/smbd
_chmod <span class="m">750</span> /usr/sbin/syslogd
_chmod <span class="m">750</span> /usr/sbin/tcpdchk
_chmod <span class="m">750</span> /usr/sbin/tcpdmatch
_chmod <span class="m">750</span> /usr/sbin/tcpdump
_chmod <span class="m">750</span> /usr/sbin/vipw</code></pre></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Best Quality Latex Is Made With Rubber]]></title>
    <link href="http://versionzero.github.io/blog/2011/08/09/the-best-quality-LaTeX-is-made-with-rubber/"/>
    <updated>2011-08-09T01:14:00-07:00</updated>
    <id>http://versionzero.github.io/blog/2011/08/09/the-best-quality-LaTeX-is-made-with-rubber</id>
    <content type="html"><![CDATA[<p>Well, that may be overstating the point, but it makes for a good
title. I ran in to this tool today, just by chance. <a href="https://launchpad.net/rubber">Rubber</a> handles
everything for building <a href="http://en.wikipedia.org/wiki/LaTeX">LaTeX</a> documents.</p>

<!--more-->


<p>In the past, I have used Makefile or the following bash macros to
build my documents:</p>

<div class="highlight"><pre><code class="language-batch" data-lang="batch">function makepdf () 
{ 
   NAME<span class="o">=</span>${<span class="m">1</span>%\.*};
   TOOL<span class="o">=</span>${<span class="m">2</span>:-pdflatex};
   <span class="k">if</span> [[ -f ${NAME}.bib ]]; then
       <span class="n">/bin/rm</span> -i -f ${NAME}.bbl;
       ${TOOL} ${NAME};
       bibtex ${NAME};
       ${TOOL} ${NAME};
   fi;
   ${TOOL} ${NAME};
   <span class="k">if</span> [[ <span class="s2">&quot;${TOOL}&quot;</span> <span class="o">==</span> <span class="s2">&quot;latex&quot;</span> ]]; then
       dvipdf ${NAME};
   fi
}

function openpdf ()
{ 
   NAME<span class="o">=</span>${<span class="m">1</span>%\.*};
   <span class="k">if</span> makepdf ${NAME}; then
       <span class="k">if</span> [[ -f ${NAME}.pdf ]]; then
           open ${NAME}.pdf;
       fi;
   fi 
}</code></pre></div>


<p>With Rubber, I will just need:</p>

<div class="highlight"><pre><code class="language-batch" data-lang="batch">function makepdf () 
{ 
   NAME<span class="o">=</span>${<span class="m">1</span>%\.*};
   rubber --pdf ${NAME}.tex;
}

function openpdf () 
{ 
   NAME<span class="o">=</span>${<span class="m">1</span>%\.*};
   <span class="k">if</span> makepdf ${NAME}; then
       <span class="k">if</span> [[ -f ${NAME}.pdf ]]; then
           open ${NAME}.pdf;
       fi;
   fi
}</code></pre></div>


<p>Which mean I can still run:</p>

<div class="highlight"><pre><code class="language-batch" data-lang="batch">$ openpdf tensor.</code></pre></div>


<p>To build my document (note the trailing dot is a product of bash-completion, but is handled by makepdf). What&rsquo;s more, I now get better error messages:</p>

<div class="highlight"><pre><code class="language-batch" data-lang="batch">$ makepdf tensors.tex
compiling tensors.tex...
There were errors compiling tensors.tex.
tensors.tex:105: Missing $ inserted.</code></pre></div>


<p>How&rsquo;s that for concise? Much nicer than 3-4 screens of macro, font and style listings.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows Environment Variable Tricks]]></title>
    <link href="http://versionzero.github.io/blog/2008/08/29/windows-environment-variable-trick/"/>
    <updated>2008-08-29T18:10:00-07:00</updated>
    <id>http://versionzero.github.io/blog/2008/08/29/windows-environment-variable-trick</id>
    <content type="html"><![CDATA[<h3>Arrays</h3>

<p>Although not explicitly supported, it is possible to make, let&rsquo;s call
them pseudo-arrays, in the environment with no fancy string parsing or
anything sloppy like that. It involves some clever uses of call
command to evaluate and extract values from the pseudo-arrays and well
positioned % signs to demarcate which environment variables we want
evaluated and when.</p>

<!--more-->


<p>Lets look at a quick example to see the basic mechanism. Assignment
would be done as follows:</p>

<div class="highlight"><pre><code class="language-batch" data-lang="batch"><span class="k">set</span> <span class="nv">count</span><span class="o">=</span><span class="m">1</span>
<span class="k">set</span> <span class="nv">var%count%</span><span class="o">=</span><span class="m">42</span></code></pre></div>


<p>There are two method to extract the value, while at the command prompt
use the %var%count%% form to extract the value:</p>

<div class="highlight"><pre><code class="language-batch" data-lang="batch"><span class="k">call</span> <span class="k">echo</span> <span class="nv">%var%</span>count%%</code></pre></div>


<p>On the other hand, while within a batch file use the %%var%count%%%
form to extract the value:</p>

<p>call echo %%var%count%%%</p>

<p>Note the extra strafing % signs. Both of the above expressions will
display the number 42, as expected; or maybe it&rsquo;s is surprising, it
all depends on your expectations and what you might consider
interesting and cool. Sadly, I do consider this cool; insofar as it
works on a straight out of the box Windows installation.  The
technique may look a little hairy, but it&rsquo;s quite useful. The above
will print the contents of var1 (i.e. 42) as we explained. We could
also replace the echo command with a set if we wanted to set some
other variable to the value in var1. Meaning the following is a valid
assignment at the command line:</p>

<div class="highlight"><pre><code class="language-batch" data-lang="batch"><span class="k">call</span> <span class="k">set</span> <span class="nv">x</span><span class="o">=</span><span class="nv">%var%</span>count%%</code></pre></div>


<p>Where:</p>

<div class="highlight"><pre><code class="language-batch" data-lang="batch"><span class="k">echo</span> <span class="nv">%x%</span></code></pre></div>


<p>Would print the number 42, as we would expect. We can even carry out
arithmetic operations on these pseudo-arrays&#8217; values. For instance,
the following would subtract 2 from the value of varN:</p>

<div class="highlight"><pre><code class="language-batch" data-lang="batch"><span class="k">call</span> <span class="k">set</span> <span class="n">/a</span> x<span class="o">=</span><span class="nv">%var%</span>N%%<span class="m">-2</span> <span class="p">&gt;</span><span class="n">nul</span></code></pre></div>


<p>Note that here we need to redirect the output to the nul port,
otherwise the result arithmetic operation would be printed to the
screen. Either way, this technique means that some rather advanced
operations can be done over a range of values, with little effort.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Windows 95 Using Virtual PC]]></title>
    <link href="http://versionzero.github.io/blog/2007/12/13/windows-95-using-virtual-pc/"/>
    <updated>2007-12-13T04:34:00-08:00</updated>
    <id>http://versionzero.github.io/blog/2007/12/13/windows-95-using-virtual-pc</id>
    <content type="html"><![CDATA[<h3>Requirements</h3>

<ul>
<li>Windows 95 CD-ROM or disk image</li>
<li><a href="http://www.bootdisk.com/bootdisk.htm">Boot disk</a></li>
<li><a href="http://www.chrysocome.net/rawwrite">RawWrite</a></li>
</ul>


<!--more-->


<h3>Installation</h3>

<ul>
<li>Create an ISO of your original <a
href="http://ben.versionzero.org/wiki/Burning_Disk_Images_%28i.e._ISO%2C_IMG%2C_etc.%29#In_Windows_95_.2F_98_.2F_ME_.2F_2000_.2F_XP_.2F_Server_2003_.2F_Vista"
class="external text" rel="nofollow">Windows 95 CD</a> or get a copy
from some someplace&hellip; Do this because otherwise it takes ages to
install; it&rsquo;s lightning fast with disk images as compared to real CD
media.</li>
<li>Create boot disks by using the Windows 95 Original (boot95a.exe)
program and writing it to a real floppy drive.  Then, using RawWrite
create the the disk image (call it, say boot95a.img).  In the end, I
only needed to use boot95a.img to get the whole thing to boot (so
don&rsquo;t even bother getting the Windows 95 Version B disk, unless you
absolutely cannot book with the first one).</li>
<li>Create a new Virtual Machine in Virtual PC with 64MB of RAM and 2GB
of disk space (the largest it can handle, I think). (I was
installing a game and I wanted to make sure there would be plenty of
room to spare.)</li>
<li>Start the new Virtual Machine and have Virtual PC capture both the
Win95.iso and boot95a.img disk, as a CD-ROM and floppy drive,
respectively.</li>
<li>Once the new Virtual Machine has started, used <code>FDISK</code> to
initialize the drive, then <code>FORMAT C: /S</code> to get it ready
for the OS. After the format is complete, which will be quick, copy
the following files from the floppy disk to the C: drive:</li>
</ul>


<div class="highlight"><pre><code class="language-batch" data-lang="batch">copy config.sys C:\
copy autoexec.bat C:\
copy MSCDEX.EXE C:\
copy cd<span class="m">1</span>.sys C:\</code></pre></div>


<p>This ensures that you will actually have a CD-ROM drive during the
setup process.  How very convenient, don&rsquo;t you think?. You can even
copy-n&#8217;-paste the commands from here (that&rsquo;s why I wrote them that
way, so I can do it in the future), if you are lazy like me.  Then you
can have Virtual PC type it all in for you by selecting the Edit &gt;
Paste menu item (or if you’re a keyboard junky, then it&rsquo;s <b>Right
Alt + V</b> (yeah, not only it is the <i>Alt</i> key, instead of the
Ctrl key, but it&rsquo;s <i>only</i> the right Alt one, since the left one
is used as your escape route from the VM).  And don&rsquo;t worry, Windows
will actually get rid of your autoexec.bat after the installation is
complete, so you don&rsquo;t have to the leg work yourself.</p>

<ul>
<li>Now on to the fun part: Installing Window 95. (It’s called SETUP and it is located on the root of the CD-ROM, which should be the R: drive, if you used the same boot disks I did.)</li>
<li>When prompted for the CD key, if you have it saved in a file, just copy it out of there (remove the &lsquo;-&rsquo; and &lsquo;OEM&rsquo;, if it has it) and use Virtual PC to paste it into the Virtual Machine (fake the key strokes rock!). It&rsquo;s all about being lazy. Conceivably, one could write out all the required key strokes for an install, and simply paste them in to Virtual PC, to automate the installation; but, well, that&rsquo;s just silly, since there are much simpler ways of doing unattended installs.</li>
<li>When asked about hardware, if you are given a list, don&rsquo;t select any for now, we do that later, once the installation is complete. (There is are drivers on the <i>Virtual Machine Additions</i> ISO provided by Virtual PC.)</li>
<li>[Optional] During setup it asks to make a start-up disk, if you release boot95a.img and make a copy of it (re-name it to startup95.img, or something similar), you can capture the new disk image, and have the Windows 95 setup create a new start-up disk for you. Very exciting.</li>
<li>Once the installation is complete, release the floppy disk, because the seek noise on boot will drive you up the wall.  While you’re at it, you can also release the install media, since you won&rsquo;t need it anymore.</li>
</ul>


<h3>Networking</h3>

<p>Because of the way we installed Windows 95, the networking may not be
configured correctly.  To fix this open the <b>Control Panel</b> and
double click on the <b>Network</b> icon.  Once there, add click on
<b>Add&hellip;</b> and double click on <b>Protocol</b> in the component
list.  From the <b>Manufacturers</b> list, select <b>Microsoft</b> and
them, from the <b>Network Protocols</b> double click on <b>TCP/IP</b>.
Finally, click <b>OK</b> and allow Windows to go about it&rsquo;s rebooting
way.  Reboots always seem to make Windows happy.  If your computer is
ever frustrated, just reboot it, it&rsquo;ll make it smile.</p>

<h3>Service Pack</h3>

<p>Once you have the networking configured properly, it&rsquo;s time to update
Windows (as all good Windows users do, right?).  I found, to my
surprise, that the Windows 95 Service Pack was still available from
the Microsoft web-site.  Man, I&rsquo;d hate to be the person doing the
support for that.</p>

<p>You can get SP1 from
<a href="http://support.microsoft.com/kb/142794">here</a>. Be warned, however,
that using the old Internet Explorer with all these new fangled
JavaScript thingamabobs can be a little trying, to say the least.</p>

<h3>Notes</h3>

<p>Now, when you tell Virtual PC to <i>Install or Update Virtual Machine
Additions</i>, in the words of the venerable comedian Douglas Addams,
&ldquo;Don&rsquo;t Panic!&rdquo;, because it will just give you a weird error (the
kernel is missing a handy function to tell Virtual PC if a debugger is
running, if that means anything to you, great! If not, don&rsquo;t worry
about, it&rsquo;s not important anyway).  But this error really isn&rsquo;t an
error; you can ignore it and simple <i>Explore</i> the CD for the
setup program&hellip; Sadly, it turns out only the DOS applications
actually work on a Window 95 base install (and they do not play well
with Windows, so you have to exit to the command line and run
FSHARE.EXE to get <b>Folder Sharing</b> to work&mdash; and even then,
it&rsquo;s only in DOS that you can access that drive.  If you try to run
Windows once it has been loaded, Windows goes all wonky&mdash; try it,
if you don&rsquo;t believe me) What really strikes me about this, is that
even the OS/2 additions work&mdash;and who even uses that OS anymore?!
(says the man installing Windows 95)&mdash;so why doesn&rsquo;t it work on a
stock Windows 95 install?  Maybe some hints can be gathered from
<a href="http://blogs.msdn.com/virtual_pc_guy/archive/2007/10/30/installing-dos-additions-under-vpc-2007.aspx">here</a></p>

<h3>Some Software Updates</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Internet Explorer 5.0]]></title>
    <link href="http://versionzero.github.io/blog/2007/12/13/internet-explorer-5.0/"/>
    <updated>2007-12-13T04:34:00-08:00</updated>
    <id>http://versionzero.github.io/blog/2007/12/13/internet-explorer-5.0</id>
    <content type="html"><![CDATA[<p>This is the final release version of IE5 released on March
18th. Although this version has some new features as well as some
enhancements to some old ones, it is certainly one of the better
browsers in the world so far. You may want to keep in mind that this
program can cause noticeable speed decreases in system performance
after installation. Gladly, you can uninstall this software and be
left with any previous versions in tact the way you may have left
them. (Unfortunately, the only copies I could find are Cintek branded
ones.)</p>

<!--more-->


<h3>Internet Explorer 5.0 for 32-bit Windows Operating Systems</h3>

<ul>
<li>Minimum Requirements: 486DX/66MHz or higher, Windows 95/98, 12MB RAM,
56MB disk space.</li>
<li>Download Size: 37MB</li>
</ul>


<h3>Internet Explorer 5.0 for 16-bit Windows Operating Systems</h3>

<ul>
<li>Minimum Requirements: 486DX or higher, Windows 3.1 or NT 3.5, 12MB
RAM for browser only installation (16MB RAM if using the Java
VM). 30MB disk space to run setup.</li>
<li>Download Size: 9.4MB</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Windows NT 4.0 Workstation Using Virtual PC]]></title>
    <link href="http://versionzero.github.io/blog/2007/09/23/windows-nt-4.0-workstation-using-virtual-pc/"/>
    <updated>2007-09-23T04:34:00-07:00</updated>
    <id>http://versionzero.github.io/blog/2007/09/23/windows-nt-4.0-workstation-using-virtual-pc</id>
    <content type="html"><![CDATA[<h3>Introduction</h3>

<p>I assume a lot about you&rsquo;re background in these tutorials. They are
primarily for myself, because I have a tendency to forget things more
often than not, so don&rsquo;t be too distressed and come calling on me if I
don&rsquo;t hold your hand through the whole thing. (Sorry, it&rsquo;s 12:04am,
and it&rsquo;s been a long day.)</p>

<h3>Requirements</h3>

<ul>
<li>Windows NT Workstation CD-ROM or disk image</li>
</ul>


<!--more-->


<h3>Installation</h3>

<ul>
<li>Create an ISO of your original <a
href="http://ben.versionzero.org/wiki/Burning_Disk_Images_%28i.e._ISO%2C_IMG%2C_etc.%29#In_Windows_95_.2F_98_.2F_ME_.2F_2000_.2F_XP_.2F_Server_2003_.2F_Vista"
class="external text" rel="nofollow">Windows 95 CD</a> or get a copy
from some someplace&hellip; Do this because otherwise it takes ages to
install; it&rsquo;s lightning fast with disk images as compared to real CD
media.</li>
<li>Create a new Virtual Machine in Virtual PC with 64MB of RAM and 4GB
of disk space, or change all that to your requirements.</li>
<li>Start the new Virtual Machine and have Virtual PC capture the
WinNT.iso (or whatever you called it) as a CD-ROM.</li>
<li>Once the new Virtual Machine has started, use your common since and
format the drive using NTFS. After the format is complete, which
will be quick, you can sit back and let the setup do its thing.</li>
<li>On the first boot, it will look like nothing is
happening&hellip; <i>forever</i>. But it is actually doing something, so
just be patient.  Even though you selected NTFS as your file system,
it first must be formatted as FAT and then converted.  I&rsquo;m sure
there is some weird historical reason for this, but I don&rsquo;t know it
of hand.  My best guess is that they had a very quick and easy way
to format a FAT partition (so the actual install phase was fast),
put some run once utilities on it, and then you boot for the first
time, it blows the whole FAT partition away and puts an NTFS one in
its place.</li>
<li>When prompted for the CD key, if you have it saved in a file, just
copy it out of there (remove the &lsquo;-&rsquo; and &lsquo;OEM&rsquo;, if it has it) and
use Virtual PC to paste it into the Virtual Machine (fake the key
strokes rock!). It&rsquo;s all about being lazy. Unfortunately, unlike
other OS installers, the NT one is not smart enough to skip from one
edit control to the next, once the edit control is full.  This means
that instead of being able to just paste the whole thing, like you
can for Windows 95, you must paste each part individually, and then
TAB to the next edit control manually.  It&rsquo;s a small irritation, but
if you have you speakers turned up, you&rsquo;ll know you entered too many
characters in on field, because Windows will beep repeatedly at
you. (My ears leant that the hard way.)</li>
<li>When asked about networking, just say you are on a <b>Wired to the
network</b> and let NT detect the network adapter for you, by
clicking on the search button.  The <b>TCP/IP Protocol</b> is
enabled by default.  For most people this is sufficient, but you can
also select <b>NetBEUI</b> for novelty&rsquo;s sake.</li>
<li>The next step allows you to install new services, I added <b>Simple
TCP/IP Services</b> and more importantly&mdash;for my network,
anyway&mdash;<b>Microsoft TCP/IP Printing</b>.</li>
<li>(<em>Optional</em>) During setup it asks to make a start-up disk, if you
copy <code>D:\SUPPORT\HQTOOL\NTHQ</code> and re-name it to
startupNT.img, or something similar, you can capture the new disk
image, and have the Windows NT setup create a new start-up disk for
you. How ever so clever.</li>
<li>Once the installation is complete, release the floppy disk, because
otherwise you&rsquo;ll find yourself in recovery land.  Also, I suggest
disabling the auto detection of the floppy disk, as the seek noise
on boot will drive you up the wall. (Maybe not the first time, but
it will eventually get to you, I promise.) While you’re at it, you
can also release the install media, since you won&rsquo;t need it anymore.</li>
<li>It actually turns out that it&rsquo;s just boots in general that take
forever, just be patient.</li>
</ul>


<h3>Networking</h3>

<p>Because of the way we installed Windows 95, the networking may not be
configured correctly.  To fix this open the <b>Control Panel</b> and
double click on the <b>Network</b> icon.  Once there, add click on
<b>Add&hellip;</b> and double click on <b>Protocol</b> in the component
list.  From the <b>Manufacturers</b> list, select <b>Microsoft</b> and
them, from the <b>Network Protocols</b> double click on <b>TCP/IP</b>.
Finally, click <b>OK</b> and allow Windows to go about it&rsquo;s rebooting
way.  Reboots always seem to make Windows happy.  If your computer is
ever frustrated, just reboot it, it&rsquo;ll make it smile.</p>

<h3>Service Pack</h3>

<p>Once you have the networking configured properly, it&rsquo;s time to update
Windows (as all good Windows users do, right?).  I found, to my
surprise, that the Windows 95 Service Pack was still available from
the Microsoft web-site.  Man, I&rsquo;d hate to be the person doing the
support for that.</p>

<p>You can get SP6a from
<a href="http://support.microsoft.com/kb/152734">here</a>. Be warned, however,
that you will have to do this on your host machine and transfer the
files over the network, as the version of IE that ships with NT (on my
old version, anyway— packing a full SP1, oh yeah!) won&rsquo;t even open
www.google.com.</p>

<h3>Notes</h3>

<ul>
<li><a href="http://www.cintek.com/download/ie5.htm">Internet Explorer 5.0</a></li>
<li><a href="http://msdn2.microsoft.com/en-us/netframework/aa569264.aspx">Microsoft .NET Framework 1.1 Redistributable</a></li>
</ul>


<p>Now, when you tell Virtual PC to Install or Update Virtual Machine
Additions, in the words of the venerable comedian Douglas Addams,
&ldquo;Don&rsquo;t Panic!&rdquo;, because it will just give you a weird error (the
kernel is missing a handy function to tell Virtual PC if a debugger is
running, if that means anything to you, great! If not, don&rsquo;t worry
about, it&rsquo;s not important anyway). But this error really isn&rsquo;t an
error; you can ignore it and simple Explore the CD for the setup
program&hellip; Sadly, it turns out only the DOS applications actually work
on a Window 95 base install (and they do not play well with Windows,
so you have to exit to the command line and run FSHARE.EXE to get
Folder Sharing to work— and even then, it&rsquo;s only in DOS that you can
access that drive. If you try to run Windows once it has been loaded,
Windows goes all wonky— try it, if you don&rsquo;t believe me.) What really
strikes me about this is that even the OS/2 additions work—and who
even uses that OS anymore?! (Says the man installing Windows 95)—so
why doesn&rsquo;t it work on a stock Windows 95 install?</p>

<h3>Some Software Updates</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Virtual Machines]]></title>
    <link href="http://versionzero.github.io/blog/2002/08/20/virtual-pc-virtual-machines/"/>
    <updated>2002-08-20T20:42:00-07:00</updated>
    <id>http://versionzero.github.io/blog/2002/08/20/virtual-pc-virtual-machines</id>
    <content type="html"><![CDATA[<h3>Virtual PC</h3>

<p>I use Virtual PC at work a lot, and since I have a tendency to write
notes to myself about how I did things, I&rsquo;ve decided to publish them
for everyone to see. (However, I absolve myself of any responsibility
with regards to the instructions being completely accurate, sucking,
missing crucial steps, or if you simply dislike of my use of the
English language, etc.)</p>

<p>The first thing about using Virtual PC is that you should always try
to use disk images as your source media. Reading from actually CD-ROMs
is so 90s (please note that I am currently installing Windows 95
because a game I like just so happens to only run on it&hellip; wow, did I
just date myself?).</p>

<p>Anyway, the reason to use disk images is primarily for speed. It
actually takes less time to make a disk image and install from it,
than to install straight from the original media. (But that&rsquo;s just in
my experience; I&rsquo;ve been using InfraRecorder and it whips out disk
images in no time. dd on *nix systems will get you the same results,
if you have one of those boxes at your disposal (although, I&rsquo;ve run
into some cases where the disk dumps from dd does get recognized as
proper CDs in Virtual PC).)</p>

<h4>Version 2004</h4>

<p>Was a piece of junk, does not run on Vista, and I refuse to think of
it anymore.</p>

<h4>Version 2007</h4>

<p>Is still kind of a piece of junk, but runs on Vista.</p>

<ul>
<li>Installing Windows 95</li>
<li>Installing Windows NT 4.0 Workstation</li>
<li>Installing Windows NT 3.51 Workstation</li>
</ul>


<h4>VMWare Server</h4>
]]></content>
  </entry>
  
</feed>
